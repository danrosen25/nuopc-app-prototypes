README for asynchronous I/O NUOPC prototype
-------------------------------------------

Show how data from a model component can be read from disk or written to disk
via an asynchronous I/O component.

Description:

  A one-way coupled system with a single driver (asyncIODriver), two model
  components, and an I/O component.

  The driver reads a config file to construct the petLists and run sequence
  when adding the model and I/O components.
  
  The model components use a simple two-phase initialization, consisting of
  advertise and realize.
  
  The I/O component uses a four-phase initialization, consisting of 
  advertise, receive-DistGrid, accept-Grid, and realize. The I/O component
  defines separate run phases for input and output.
  

Build:
  - Set environment variable ESMFMKFILE to point to the esmf.mk of your ESMF
    installation.
  - gmake
  
Execution:
  - Optionally set environment variable ESMF_RUNTIME_COMPLIANCECHECK to ON.
  - mpirun -np X ./esmApp (where X is the total number of PETs, typically 4)
  
Output:
  - PET*.Log files containing compliance checker output if turned on.
  - The prototype outputs time stepping information to stdout.

Code structure:
  - Makefile    - Makefile that is based on the standard esmf.mk mechanism.
  - io.F90      - The I/O component, specializing generic NUOPC_Model.
  - atm.F90     - The ATM model component, specializing generic NUOPC_Model.
  - ocn.F90     - The ATM model component, specializing generic NUOPC_Model.
  - esm.F90     - The driver component, specializing generic NUOPC_Driver.
  - esmApp.F90  - Main application.
